package com.assignment.com.registration.assignment.service;

import com.assignment.com.registration.assignment.entity.User;
import com.assignment.com.registration.assignment.repository.UserRepository;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.context.ApplicationContext;

import static org.mockito.Mockito.*;

class UserRegistrationServiceTest {

    @InjectMocks
    private UserRegistrationService userRegistrationService;

    @Mock
    private UserRepository userRepository;

    @Mock
    private ApplicationContext applicationContext;

    @Mock
    private UserService registrationService; // Mocked UserService to simulate sending emails

    private User user;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        user = new User();
        user.setId(1L);
        user.setEmail("user@example.com");
        user.setUserType("Customer"); // or "Admin" depending on your setup
    }

    @Test
    void testRegisterUser_Success() {
        // Arrange
        when(userRepository.save(any(User.class))).thenReturn(user);
        when(applicationContext.getBean(user.getUserType())).thenReturn(registrationService);

        // Act
        User registeredUser = userRegistrationService.registerUser(user);

        // Assert
        verify(userRepository).save(user);
        verify(registrationService).sendWelcomeEmail(user);
        assert registeredUser.equals(user);
    }

    @Test
    void testRegisterUser_UserTypeNotSupported() {
        // Arrange
        when(userRepository.save(any(User.class))).thenReturn(user);
        when(applicationContext.getBean(user.getUserType())).thenThrow(new RuntimeException("Bean not found"));

        // Act & Assert
        try {
            userRegistrationService.registerUser(user);
        } catch (RuntimeException ex) {
            assert ex.getMessage().equals("User Type Not Supported");
        }

        verify(userRepository).save(user);
        verify(registrationService, never()).sendWelcomeEmail(user); // Ensure email is not sent
    }
}
